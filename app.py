# app.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import calplot
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from math import sqrt


# Configuraci√≥n
st.set_page_config(page_title="Riesgo Clim√°tico en Valencia", layout="wide")

# T√≠tulo
st.title("üå§Ô∏è Riesgo Clim√°tico Diario en Valencia")
st.markdown("""
Esta aplicaci√≥n muestra la evoluci√≥n de los riesgos clim√°ticos en Valencia basados en tres factores: **√≠ndice UV elevado**, **calor extremo** y **humedad alta**.
""")

# Cargar datos
df = pd.read_csv("datos_valencia_limpios.csv", parse_dates=["datetime"])

# A√±adir columnas de mes y a√±o
df["mes"] = df["datetime"].dt.month
df["a√±o"] = df["datetime"].dt.year

# Sidebar de filtros
st.sidebar.header("üìÖ Filtros")
a√±o_sel = st.sidebar.selectbox("Selecciona un a√±o", sorted(df["a√±o"].unique()), index=0)
mes_sel = st.sidebar.selectbox("Selecciona un mes", sorted(df["mes"].unique()), index=0)

df_filtrado = df[(df["a√±o"] == a√±o_sel) & (df["mes"] == mes_sel)]

# üîé Explicaci√≥n de riesgos
with st.expander("‚ÑπÔ∏è ¬øQu√© significa cada tipo de riesgo?"):
    st.markdown("""
    - **Riesgo UV alto**: √≠ndice UV ‚â• 8. Puede provocar quemaduras en menos de 30 minutos sin protecci√≥n.
    - **Riesgo por calor extremo**: temperatura m√°xima ‚â• 35¬∞C. Aumenta el riesgo de golpe de calor.
    - **Riesgo por humedad alta**: humedad relativa ‚â• 85%. Dificulta la evaporaci√≥n del sudor y aumenta la sensaci√≥n t√©rmica.
    """)

# Gr√°fico: evoluci√≥n del √≠ndice UV
st.subheader("üìà Evoluci√≥n diaria del √≠ndice UV")
fig1, ax1 = plt.subplots(figsize=(10, 4))
ax1.plot(df_filtrado["datetime"], df_filtrado["uvindex"], marker='o', color='orange')
ax1.set_xlabel("Fecha")
ax1.set_ylabel("√çndice UV")
ax1.set_title("√çndice UV diario")
ax1.grid(True)
st.pyplot(fig1)

# Gr√°fico: d√≠as con cada tipo de riesgo
st.subheader("üî• Cantidad de d√≠as con riesgo clim√°tico")
riesgos = df_filtrado[["riesgo_uv", "riesgo_calor", "riesgo_humedad"]].sum()
riesgos.index = ["UV alto", "Calor extremo", "Humedad alta"]
fig2, ax2 = plt.subplots()
sns.barplot(x=riesgos.index, y=riesgos.values, ax=ax2, palette="Reds")
ax2.set_ylabel("N√∫mero de d√≠as")
ax2.set_title("Tipos de riesgo clim√°tico")
st.pyplot(fig2)

# Gr√°fico: condiciones meteorol√≥gicas m√°s frecuentes
st.subheader("üå¶Ô∏è Condiciones meteorol√≥gicas m√°s frecuentes")
condiciones = df_filtrado["condicion_simplificada"].value_counts()
fig3, ax3 = plt.subplots()
sns.barplot(x=condiciones.index, y=condiciones.values, ax=ax3, palette="Blues")
ax3.set_ylabel("N√∫mero de d√≠as")
ax3.set_title("Condiciones m√°s comunes")
st.pyplot(fig3)

# Tabla: d√≠as con mayor riesgo total
st.subheader("üìã Top 10 d√≠as con mayor riesgo")
tabla = df_filtrado.sort_values(by="riesgo_total", ascending=False).head(10)
st.dataframe(tabla[["datetime", "uvindex", "tempmax", "humidity", "riesgo_total", "condicion_simplificada"]])


# üéõÔ∏è PREDICCI√ìN EN TIEMPO REAL
st.subheader("üéõÔ∏è Predicci√≥n personalizada del √≠ndice UV")
st.markdown("""
¬øTe has preguntado cu√°nto podr√≠a aumentar el riesgo solar en funci√≥n del clima?  
Con esta herramienta puedes **simular el √≠ndice UV** esperado introduciendo condiciones meteorol√≥gicas reales o hipot√©ticas.

Esto puede ayudarte a:
- Evaluar el riesgo de quemaduras o exposici√≥n solar.
- Tomar decisiones informadas sobre protecci√≥n solar.
- Planificar actividades al aire libre con mayor seguridad.

---

### üß† ¬øPor qu√© es posible predecir el √≠ndice UV con estos datos?

Aunque el √≠ndice UV depende principalmente de factores astron√≥micos y atmosf√©ricos (como la posici√≥n del sol y la capa de ozono), **las condiciones locales influyen directamente en su efecto sobre la salud**. Estas variables ayudan a estimar mejor el riesgo:

- **Temperatura m√°xima**: A menudo asociada a cielos despejados y mayor radiaci√≥n solar.
- **Humedad**: Afecta la dispersi√≥n de la radiaci√≥n y puede influir en la sensaci√≥n t√©rmica.
- **Condici√≥n meteorol√≥gica**: D√≠as nublados o lluviosos suelen reducir la exposici√≥n directa, pero no la eliminan por completo.

El modelo ha sido entrenado con datos reales de Valencia para aprender la relaci√≥n entre estas condiciones y el √≠ndice UV registrado.
""")


st.markdown("Introduce condiciones meteorol√≥gicas para estimar el √≠ndice UV:")

# Formulario de entrada
col1, col2 = st.columns(2)

with col1:
    temp_input = st.number_input("Temperatura m√°xima (¬∞C)", min_value=0.0, max_value=50.0, value=25.0)
    humidity_input = st.slider("Humedad relativa (%)", 0, 100, 60)

with col2:
    condicion_input = st.selectbox(
        "Condici√≥n meteorol√≥gica",
        ["despejado", "nublado", "lluvia", "otros"]
    )

# Codificar la condici√≥n como en el modelo
cond_map = {"despejado": 0, "lluvia": 1, "nublado": 2, "otros": 3}
cond_codificada = cond_map.get(condicion_input, 3)

# Predecir
if st.button("Predecir √≠ndice UV"):
    entrada = pd.DataFrame([[temp_input, humidity_input, cond_codificada]],
                           columns=["tempmax", "humidity", "condicion_simplificada"])
    prediccion = modelo.predict(entrada)[0]
    st.success(f"üåû El √≠ndice UV estimado es: **{prediccion:.2f}**")

# üî¨ MODELO DE PREDICCI√ìN ‚Äì RANDOM FOREST
st.subheader("üî¨ Predicci√≥n de √≠ndice UV ‚Äì Modelo Random Forest")
st.markdown("""
Para predecir el √≠ndice UV a partir de variables meteorol√≥gicas, se ha optado por entrenar un modelo de tipo Random Forest por las siguientes razones:

Es un modelo robusto y vers√°til, ideal cuando se trabaja con datasets peque√±os o medianos como este.

- Permite capturar relaciones no lineales entre las variables. Por ejemplo, el efecto de la humedad sobre el √≠ndice UV no siempre es proporcional ni directo.
- Tolera bien los datos con ruido o peque√±as imprecisiones, sin requerir una limpieza excesiva o supuestos estad√≠sticos estrictos.
- Calcula la importancia de cada variable autom√°ticamente, lo que permite entender qu√© factores influyen m√°s en la predicci√≥n (por ejemplo, en este caso, la temperatura tiene mayor peso que la humedad o la condici√≥n del cielo).
- Es f√°cil de interpretar visualmente, lo que resulta ideal para una aplicaci√≥n educativa y divulgativa como esta.

En resumen, Random Forest es una opci√≥n equilibrada entre precisi√≥n, facilidad de entrenamiento y explicabilidad, lo que lo convierte en una elecci√≥n adecuada para este tipo de aplicaci√≥n ciudadana basada en datos abiertos.

""")

# Preparar datos para el modelo
df_modelo = df.copy()
df_modelo["condicion_simplificada"] = df_modelo["condicion_simplificada"].astype("category").cat.codes

features = ["tempmax", "humidity", "condicion_simplificada"]
X = df_modelo[features]
y = df_modelo["uvindex"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entrenar modelo
modelo = RandomForestRegressor(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)
y_pred = modelo.predict(X_test)

# Evaluaci√≥n
rmse = sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

# Gr√°fico real vs predicho
fig_rf1, ax_rf1 = plt.subplots()
sns.scatterplot(x=y_test, y=y_pred, ax=ax_rf1)
ax_rf1.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
ax_rf1.set_xlabel("Valor real")
ax_rf1.set_ylabel("Valor predicho")
ax_rf1.set_title("Random Forest ‚Äì √çndice UV")
st.pyplot(fig_rf1)

# Importancia de variables
importancia = pd.Series(modelo.feature_importances_, index=features)
fig_rf2, ax_rf2 = plt.subplots()
sns.barplot(x=importancia.index, y=importancia.values, ax=ax_rf2)
ax_rf2.set_title("Importancia de variables")
ax_rf2.set_ylabel("Peso")
st.pyplot(fig_rf2)
